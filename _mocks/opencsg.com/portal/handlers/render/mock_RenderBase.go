// Code generated by mockery v2.47.0. DO NOT EDIT.

package renderHandlers

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// MockRenderBase is an autogenerated mock type for the RenderBase type
type MockRenderBase struct {
	mock.Mock
}

type MockRenderBase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRenderBase) EXPECT() *MockRenderBase_Expecter {
	return &MockRenderBase_Expecter{mock: &_m.Mock}
}

// RenderTemplate provides a mock function with given fields: ctx, templateName, data
func (_m *MockRenderBase) RenderTemplate(ctx *gin.Context, templateName string, data map[string]interface{}) {
	_m.Called(ctx, templateName, data)
}

// MockRenderBase_RenderTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenderTemplate'
type MockRenderBase_RenderTemplate_Call struct {
	*mock.Call
}

// RenderTemplate is a helper method to define mock.On call
//   - ctx *gin.Context
//   - templateName string
//   - data map[string]interface{}
func (_e *MockRenderBase_Expecter) RenderTemplate(ctx interface{}, templateName interface{}, data interface{}) *MockRenderBase_RenderTemplate_Call {
	return &MockRenderBase_RenderTemplate_Call{Call: _e.mock.On("RenderTemplate", ctx, templateName, data)}
}

func (_c *MockRenderBase_RenderTemplate_Call) Run(run func(ctx *gin.Context, templateName string, data map[string]interface{})) *MockRenderBase_RenderTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(string), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockRenderBase_RenderTemplate_Call) Return() *MockRenderBase_RenderTemplate_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRenderBase_RenderTemplate_Call) RunAndReturn(run func(*gin.Context, string, map[string]interface{})) *MockRenderBase_RenderTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRenderBase creates a new instance of MockRenderBase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRenderBase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRenderBase {
	mock := &MockRenderBase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
